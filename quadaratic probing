#include<stdio.h>
#define size 10
int hash(int key)
{
	return (3*key+2)%size;  
}

int insert(int ht[], int key)
{
	int index,i=0;
	int x=hash(key);
	if (ht[x]==-1)
	{
		ht[x]=key;
		printf("%d is inserted at index %d\n",key,x);	
		return 0;
	}
	else
	{	
		index=x;
		while(ht[index]!=-1)
		{
			printf("index %d is pre occupied\n",index);
			index=(x+i*i)%size;
			i++;
			if(i==size){
				printf("Can't be inserted\n");
				return;
			}
		}
	}
	ht[index]=key;
	printf("%d is inserted at index %d\n",key,index);	
}

void display(int ht[])
{
	int i=0;
	printf("The hash table is \n");
	while(i<size)
	{
		if(ht[i]==-1)
			printf(" - ,");
		else
			printf(" %d ,",ht[i]);
		i++;
	}
	printf("\n");
}

int search(int ht[],int key)
{
	int index=hash(key);
	int i;
	while(ht[index]!=key)
	{
		index=(index+i*i)%size;
		i++;
		if (ht[index]==-1||ht[index]==hash(key))
			return -1;
	}
	return index;
}

int main()
{
	int ht[size],i; 
	for(i=0;i<size;i++)
	{
		ht[i]=-1;
	}
	insert(ht,2);
	insert(ht,3);
	insert(ht,5);
	insert(ht,7);
	insert(ht,11);
	insert(ht,12);
	insert(ht,9);
	insert(ht,6);
	display(ht);
	int s=search(ht,7);
	if(s==-1)
		printf("Not present\n");
	else
		printf("Key found at index %d\n",s);
	s=search(ht,17);
	if(s==-1)
		printf("Not present\n");
	else
		printf("Key found at index %d\n",s);
	return 0;		
}

